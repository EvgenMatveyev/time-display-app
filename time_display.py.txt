import tkinter as tk
from tkinter import colorchooser
from datetime import datetime
import pytz
import ttkbootstrap as ttkb
from ttkbootstrap import ttk

# ICAO to Timezone Mapping
airport_timezones = {
    "CYWG": "America/Winnipeg", "CYBR": "America/Winnipeg", "CYQD": "America/Winnipeg", "CYFO": "America/Winnipeg",
    "CYYL": "America/Winnipeg", "CYBQ": "America/Winnipeg", "CYBV": "America/Winnipeg", "CYNE": "America/Winnipeg",
    "CYIV": "America/Winnipeg", "CYGX": "America/Winnipeg", "CYTH": "America/Winnipeg", "CYYQ": "America/Winnipeg",
    "CYEK": "America/Rankin_Inlet", "CYXN": "America/Rankin_Inlet", "CYBK": "America/Rankin_Inlet", "CYRT": "America/Rankin_Inlet",
    "CYCS": "America/Rankin_Inlet", "CYZS": "America/Rankin_Inlet", "CYUT": "America/Rankin_Inlet",
    "CYBB": "America/Inuvik", "CYYH": "America/Inuvik", "CYGT": "America/Iqaluit", "CYUX": "America/Iqaluit",
    "CYHK": "America/Yellowknife", "CYCB": "America/Yellowknife", "CYIO": "America/Iqaluit", "CYAB": "America/Iqaluit",
    "CYCY": "America/Cambridge_Bay", "CYRB": "America/Cambridge_Bay", "CYTE": "America/Yellowknife", "CYFB": "America/Iqaluit",
    "CYQR": "America/Regina", "CYXE": "America/Regina", "CYPA": "America/Regina", "CYSF": "America/Regina",
    "CYVC": "America/Regina", "CYQK": "America/Winnipeg", "CYHD": "America/Winnipeg", "CYXL": "America/Winnipeg",
    "CYRL": "America/Winnipeg", "CYPL": "America/Winnipeg", "CYQT": "America/Thunder_Bay", "CYMO": "America/Winnipeg",
    "CYTS": "America/Toronto", "CYSK": "America/Iqaluit", "CYGW": "America/Iqaluit", "CYGL": "America/Iqaluit",
    "CYVP": "America/Iqaluit"
}

class TimeDisplayApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Airport Time Zones")
        self.root.geometry("700x400")
        self.root.configure(bg='black')

        self.num_zones = tk.IntVar(value=3)
        self.font_size = tk.DoubleVar(value=14)
        self.font_color = tk.StringVar(value="#ffffff")
        self.bg_color = tk.StringVar(value="#000000")
        self.transparency = tk.DoubleVar(value=1.0)
        self.stay_on_top = tk.BooleanVar(value=True)

        self.dropdowns = []
        self.zone_frames = []

        # Controls
        control_frame = ttk.Frame(self.root)
        control_frame.pack(pady=5, fill='x')

        ttk.Label(control_frame, text="Airports:").pack(side=tk.LEFT)
        ttk.Spinbox(control_frame, from_=0, to=5, textvariable=self.num_zones, width=3, command=self.update_zone_ui).pack(side=tk.LEFT, padx=5)

        ttk.Label(control_frame, text="Font Size:").pack(side=tk.LEFT)
        ttk.Scale(control_frame, from_=10, to=30, variable=self.font_size, orient=tk.HORIZONTAL, length=100, command=lambda e: self.update_display()).pack(side=tk.LEFT)

        ttk.Button(control_frame, text="Font Color", command=self.choose_font_color).pack(side=tk.LEFT, padx=5)
        ttk.Button(control_frame, text="Background", command=self.choose_bg_color).pack(side=tk.LEFT)

        ttk.Label(control_frame, text="Transparency:").pack(side=tk.LEFT, padx=5)
        ttk.Scale(control_frame, from_=0.1, to=1.0, variable=self.transparency, orient=tk.HORIZONTAL, length=80, command=self.update_transparency).pack(side=tk.LEFT)

        ttk.Checkbutton(control_frame, text="Stay on top", variable=self.stay_on_top, command=self.toggle_stay_on_top).pack(side=tk.LEFT, padx=5)

        # Display area
        self.zones_frame = ttk.Frame(self.root)
        self.zones_frame.pack(pady=10)

        self.update_zone_ui()
        self.update_time()

    def update_zone_ui(self):
        for frame in self.zone_frames:
            frame.destroy()
        self.zone_frames.clear()
        self.dropdowns.clear()

        # UTC First Row
        utc_frame = ttk.Frame(self.zones_frame)
        utc_frame.pack(pady=3, fill='x')
        label = ttk.Label(utc_frame, text="UTC", font=("Consolas", int(self.font_size.get()), "bold"))
        label.pack(side=tk.LEFT, padx=5)
        time_label = ttk.Label(utc_frame, text="", font=("Consolas", int(self.font_size.get())))
        time_label.pack(side=tk.LEFT, padx=10)
        dst_label = ttk.Label(utc_frame, text="STD", font=("Consolas", 10, "italic"))
        dst_label.pack(side=tk.LEFT, padx=5)

        utc_frame.time_label = time_label
        utc_frame.dst_label = dst_label
        self.zone_frames.append(utc_frame)

        # ICAO Dropdowns
        for i in range(self.num_zones.get()):
            frame = ttk.Frame(self.zones_frame)
            frame.pack(pady=3, fill='x')

            airport_var = tk.StringVar(value=list(airport_timezones.keys())[i % len(airport_timezones)])
            dropdown = ttk.Combobox(frame, textvariable=airport_var, values=list(airport_timezones.keys()), width=10, state="readonly")
            dropdown.pack(side=tk.LEFT, padx=5)
            self.dropdowns.append((airport_var, frame))

            time_label = ttk.Label(frame, text="", font=("Consolas", int(self.font_size.get())))
            time_label.pack(side=tk.LEFT, padx=10)

            dst_label = ttk.Label(frame, text="", font=("Consolas", 10, "italic"))
            dst_label.pack(side=tk.LEFT, padx=5)

            frame.time_label = time_label
            frame.dst_label = dst_label
            self.zone_frames.append(frame)

        self.update_display()

    def update_display(self):
        bg = self.bg_color.get()
        fg = self.font_color.get()

        # UTC update
        utc_frame = self.zone_frames[0]
        utc_now = datetime.utcnow().strftime('%H:%M')
        utc_frame.time_label.config(text=f"UTC LT: {utc_now} Z", foreground=fg, background=bg)
        utc_frame.dst_label.config(text="STD", foreground=fg, background=bg)

        # ICAO zones update
        for idx, (airport_var, frame) in enumerate(self.dropdowns, start=1):
            code = airport_var.get()
            tz_name = airport_timezones.get(code)
            try:
                tz = pytz.timezone(tz_name)
                now_local = tz.normalize(pytz.utc.localize(datetime.utcnow()).astimezone(tz))
                time_str = now_local.strftime('%H:%M')
                dst = now_local.dst()
                dst_str = "DST" if dst and dst.total_seconds() > 0 else "STD"
                frame.time_label.config(text=f"{code} LT: {time_str}", foreground=fg, background=bg)
                frame.dst_label.config(text=dst_str, foreground=fg, background=bg)
            except:
                frame.time_label.config(text="Invalid", foreground="red", background=bg)
                frame.dst_label.config(text="", background=bg)

        self.root.configure(bg=bg)

    def update_time(self):
        self.update_display()
        self.root.after(1000, self.update_time)

    def choose_font_color(self):
        color = colorchooser.askcolor(title="Choose Font Color")[1]
        if color:
            self.font_color.set(color)
            self.update_display()

    def choose_bg_color(self):
        color = colorchooser.askcolor(title="Choose Background Color")[1]
        if color:
            self.bg_color.set(color)
            self.update_display()

    def update_transparency(self, *_):
        self.root.attributes("-alpha", self.transparency.get())

    def toggle_stay_on_top(self):
        self.root.attributes("-topmost", self.stay_on_top.get())

if __name__ == "__main__":
    root = ttkb.Window(themename="darkly")
    app = TimeDisplayApp(root)
    root.mainloop()
