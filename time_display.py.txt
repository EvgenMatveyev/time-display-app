import tkinter as tk
from tkinter import colorchooser
from datetime import datetime
import pytz
import ttkbootstrap as ttkb
from ttkbootstrap import ttk

class TimeDisplayApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Time Zones")
        self.root.configure(bg='black')
        self.root.geometry("600x300")

        # Variables
        self.num_zones = tk.IntVar(value=1)
        self.font_size = tk.DoubleVar(value=14)
        self.font_color = tk.StringVar(value="#ffffff")
        self.bg_color = tk.StringVar(value="#000000")
        self.transparency = tk.DoubleVar(value=1.0)
        self.stay_on_top = tk.BooleanVar(value=True)

        self.dropdowns = []
        self.labels = []

        # Control Frame
        control_frame = ttk.Frame(self.root)
        control_frame.pack(pady=5)

        ttk.Label(control_frame, text="Time Zones:").pack(side=tk.LEFT)
        ttk.Spinbox(control_frame, from_=1, to=6, textvariable=self.num_zones, width=3, command=self.update_zone_ui).pack(side=tk.LEFT, padx=5)

        ttk.Label(control_frame, text="Font Size:").pack(side=tk.LEFT)
        ttk.Scale(control_frame, from_=10, to=30, variable=self.font_size, orient=tk.HORIZONTAL, length=100, command=lambda e: self.update_display()).pack(side=tk.LEFT)

        ttk.Button(control_frame, text="Font Color", command=self.choose_font_color).pack(side=tk.LEFT, padx=5)
        ttk.Button(control_frame, text="Background", command=self.choose_bg_color).pack(side=tk.LEFT)

        ttk.Label(control_frame, text="Transparency:").pack(side=tk.LEFT, padx=5)
        ttk.Scale(control_frame, from_=0.1, to=1.0, variable=self.transparency, orient=tk.HORIZONTAL, length=80, command=self.update_transparency).pack(side=tk.LEFT)

        ttk.Checkbutton(control_frame, text="Stay on top", variable=self.stay_on_top, command=self.toggle_stay_on_top).pack(side=tk.LEFT, padx=5)

        # Dropdowns + Display Frame
        self.zones_frame = ttk.Frame(self.root)
        self.zones_frame.pack(pady=5)

        self.update_zone_ui()
        self.update_time()

    def update_zone_ui(self):
        for frame in self.dropdowns:
            frame.destroy()
        for frame in self.labels:
            frame.destroy()

        self.dropdowns.clear()
        self.labels.clear()

        for i in range(self.num_zones.get()):
            frame = ttk.Frame(self.zones_frame)
            frame.pack(pady=3)

            zone_var = tk.StringVar(value="UTC")
            dropdown = ttk.Combobox(frame, textvariable=zone_var, values=pytz.all_timezones, width=35, state="readonly")
            dropdown.pack(side=tk.LEFT, padx=5)
            self.dropdowns.append(dropdown)

            zone_label = ttk.Label(frame, text="", font=("Consolas", int(self.font_size.get()), "bold"))
            zone_label.pack(side=tk.LEFT, padx=10)
            self.labels.append((zone_var, zone_label))

        self.update_display()

    def update_display(self):
        bg = self.bg_color.get()
        fg = self.font_color.get()

        for (zone_var, label) in self.labels:
            try:
                tz = pytz.timezone(zone_var.get())
                now = datetime.now(tz)
                time_str = now.strftime('%H:%M')
                label.config(text=f"{zone_var.get()}: {time_str}", font=("Consolas", int(self.font_size.get()), "bold"), background=bg, foreground=fg)
            except:
                label.config(text="Invalid zone", foreground="red")

        self.root.configure(bg=bg)
        self.zones_frame.configure(style="TFrame")

    def update_time(self):
        self.update_display()
        self.root.after(1000, self.update_time)

    def choose_font_color(self):
        color = colorchooser.askcolor(title="Choose Font Color")[1]
        if color:
            self.font_color.set(color)
            self.update_display()

    def choose_bg_color(self):
        color = colorchooser.askcolor(title="Choose Background Color")[1]
        if color:
            self.bg_color.set(color)
            self.update_display()

    def update_transparency(self, *_):
        self.root.attributes("-alpha", self.transparency.get())

    def toggle_stay_on_top(self):
        self.root.attributes("-topmost", self.stay_on_top.get())

if __name__ == "__main__":
    root = ttkb.Window(themename="darkly")
    app = TimeDisplayApp(root)
    root.mainloop()
