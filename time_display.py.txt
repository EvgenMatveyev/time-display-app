import tkinter as tk
from tkinter import simpledialog, colorchooser, font
from tkinter import ttk as ttk_original
import ttkbootstrap as ttk
from ttkbootstrap.constants import *
from datetime import datetime, timedelta
import pytz

# Updated airport timezone mapping
airport_timezones = {
    "CYWG": "America/Winnipeg", "CYBR": "America/Winnipeg", "CYQD": "America/Winnipeg", "CYFO": "America/Winnipeg",
    "CYYL": "America/Winnipeg", "CYBQ": "America/Winnipeg", "CYBV": "America/Winnipeg", "CYNE": "America/Winnipeg",
    "CYIV": "America/Winnipeg", "CYGX": "America/Winnipeg", "CYTH": "America/Winnipeg", "CYYQ": "America/Winnipeg",
    "CYEK": "America/Rankin_Inlet", "CYXN": "America/Rankin_Inlet", "CYBK": "America/Rankin_Inlet", "CYRT": "America/Rankin_Inlet",
    "CYCS": "America/Rankin_Inlet", "CYZS": "America/Rankin_Inlet", "CYUT": "America/Rankin_Inlet", "CYBB": "America/Rankin_Inlet",
    "CYYH": "America/Rankin_Inlet", "CYGT": "America/Rankin_Inlet", "CYUX": "America/Rankin_Inlet", "CYHK": "America/Cambridge_Bay",
    "CYCB": "America/Cambridge_Bay", "CYIO": "America/Cambridge_Bay", "CYAB": "America/Cambridge_Bay", "CYCY": "America/Cambridge_Bay",
    "CYRB": "America/Cambridge_Bay", "CYTE": "America/Cambridge_Bay", "CYFB": "America/Iqaluit", "CYQR": "America/Regina",
    "CYXE": "America/Regina", "CYPA": "America/Regina", "CYSF": "America/Regina", "CYVC": "America/Regina",
    "CYQK": "America/Winnipeg", "CYHD": "America/Winnipeg", "CYXL": "America/Winnipeg", "CYRL": "America/Winnipeg",
    "CYPL": "America/Winnipeg", "CYQT": "America/Winnipeg", "CYMO": "America/Winnipeg", "CYTS": "America/Toronto",
    "CYSK": "America/Toronto", "CYGW": "America/Toronto", "CYGL": "America/Toronto", "CYVP": "America/Toronto"
}

class TimeApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Airport Time Tracker")
        self.root.geometry("300x400")
        self.root.attributes('-topmost', True)
        self.root.attributes('-alpha', 1.0)

        self.theme = ttk.Style("darkly")
        self.time_font = ("Segoe UI", 12)
        self.font_color = "#FFFFFF"
        self.bg_color = "#2C2C2C"
        self.time_bg_color = "#3E3E3E"
        self.time_alpha = 1.0
        self.root.configure(bg=self.bg_color)

        self.airport_vars = []
        self.labels = []

        self.create_menu()
        self.create_widgets()
        self.update_times()

    def create_menu(self):
        menubar = tk.Menu(self.root)
        layout_menu = tk.Menu(menubar, tearoff=0)
        layout_menu.add_command(label="Change Font", command=self.change_font)
        layout_menu.add_command(label="Font Color", command=self.change_font_color)
        layout_menu.add_command(label="App Background Color", command=self.change_bg_color)
        layout_menu.add_command(label="Time Field Background", command=self.change_time_bg_color)
        layout_menu.add_command(label="App Transparency", command=self.change_app_transparency)
        layout_menu.add_command(label="Time Field Transparency", command=self.change_time_field_transparency)
        layout_menu.add_command(label="Add Custom Airport", command=self.add_custom_airport)
        menubar.add_cascade(label="Layout Settings", menu=layout_menu)
        self.root.config(menu=menubar)

    def create_widgets(self):
        self.frame = ttk.Frame(self.root, padding=5)
        self.frame.pack(fill='both', expand=True)

        # Stay on top checkbox
        self.stay_on_top_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(self.frame, text="Stay on Top", variable=self.stay_on_top_var,
                        command=self.toggle_stay_on_top).pack(anchor="w", padx=5)

        # Airport count dropdown
        self.count_var = tk.IntVar(value=2)
        ttk.Label(self.frame, text="Select number of airports:").pack(anchor="w")
        self.count_dropdown = ttk.Combobox(self.frame, textvariable=self.count_var, values=list(range(1, 6)), state="readonly")
        self.count_dropdown.pack(fill='x')
        self.count_dropdown.bind("<<ComboboxSelected>>", self.refresh_airports)

        self.display_frame = ttk.Frame(self.frame)
        self.display_frame.pack(fill='both', expand=True)
        self.refresh_airports()

    def refresh_airports(self, event=None):
        for widget in self.display_frame.winfo_children():
            widget.destroy()
        self.labels.clear()
        self.airport_vars.clear()

       # UTC row - manually build row with extra spacing
        row = ttk.Frame(self.display_frame)
        row.pack(fill='x', pady=2)

label = ttk.Label(row, text="UTC", width=6)
label.pack(side="left", padx=2)

# Spacer to shift time label to the right (~2 char width)
spacer = tk.Label(row, text="  ", width=2, bg=self.bg_color)
spacer.pack(side="left")

time_lbl = tk.Label(row, text="", width=10, fg=self.font_color, bg=self.time_bg_color, font=self.time_font)
time_lbl.pack(side="left", padx=2)

dst_lbl = tk.Label(row, text="", width=5, fg=self.font_color, bg=self.time_bg_color, font=self.time_font)
dst_lbl.pack(side="left", padx=2)

self.labels.append(("UTC", time_lbl, dst_lbl))


        # User airport rows
        keys = list(airport_timezones.keys())
        for i in range(self.count_var.get()):
            var = tk.StringVar(value=keys[i % len(keys)])
            self.airport_vars.append(var)
            self.add_time_row(var)

    def add_time_row(self, var, tz=None):
        row = ttk.Frame(self.display_frame)
        row.pack(fill='x', pady=2)

        if isinstance(var, str):
            label = ttk.Label(row, text=var, width=6)
        else:
            dropdown = ttk.Combobox(row, textvariable=var, values=list(airport_timezones.keys()), width=6)
            dropdown.pack(side="left", padx=2)
            label = dropdown

        label.pack(side="left", padx=2)
        time_lbl = tk.Label(row, text="", width=10, fg=self.font_color, bg=self.time_bg_color, font=self.time_font)
        time_lbl.pack(side="left", padx=2)
        dst_lbl = tk.Label(row, text="", width=5, fg=self.font_color, bg=self.time_bg_color, font=self.time_font)
        dst_lbl.pack(side="left", padx=2)

        self.labels.append((var, time_lbl, dst_lbl))

    def update_times(self):
        now_utc = datetime.now(pytz.utc)
        for var, time_lbl, dst_lbl in self.labels:
            tz_name = "UTC" if var == "UTC" else airport_timezones.get(var.get(), "UTC")
            tz = pytz.timezone(tz_name)
            local_time = now_utc.astimezone(tz)
            is_dst = local_time.dst() != timedelta(0)

            time_lbl.config(text=local_time.strftime("%H:%M"))
            dst_lbl.config(text="DST" if is_dst else "STD")

        self.root.after(1000, self.update_times)

    def toggle_stay_on_top(self):
        self.root.attributes('-topmost', self.stay_on_top_var.get())

    def change_font(self):
        fonts = list(font.families())
        chosen = simpledialog.askstring("Font", "Enter font name:", initialvalue=self.time_font[0])
        if chosen in fonts:
            self.time_font = (chosen, 12)
            for _, t, d in self.labels:
                t.config(font=self.time_font)
                d.config(font=self.time_font)

    def change_font_color(self):
        color = colorchooser.askcolor(title="Font Color")[1]
        if color:
            self.font_color = color
            for _, t, d in self.labels:
                t.config(fg=color)
                d.config(fg=color)

    def change_bg_color(self):
        color = colorchooser.askcolor(title="Background Color")[1]
        if color:
            self.bg_color = color
            self.root.configure(bg=color)

    def change_time_bg_color(self):
        color = colorchooser.askcolor(title="Time Field Background")[1]
        if color:
            self.time_bg_color = color
            for _, t, d in self.labels:
                t.config(bg=color)
                d.config(bg=color)

    def change_app_transparency(self):
        val = simpledialog.askfloat("App Transparency", "Enter transparency (0.1 - 1.0):", minvalue=0.1, maxvalue=1.0)
        if val:
            self.root.attributes('-alpha', val)

    def change_time_field_transparency(self):
        pass  # Tkinter does not support per-widget transparency natively

    def add_custom_airport(self):
        icao = simpledialog.askstring("ICAO Code", "Enter ICAO code (e.g., XXXX):")
        tz = simpledialog.askstring("Timezone", "Enter timezone (e.g., Europe/London):")
        if icao and tz:
            airport_timezones[icao.upper()] = tz
            self.refresh_airports()

# Run the app
if __name__ == '__main__':
    root = ttk.Window(themename="darkly")
    app = TimeApp(root)
    root.mainloop()
