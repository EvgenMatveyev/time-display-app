import tkinter as tk
from tkinter import colorchooser, simpledialog
from datetime import datetime
import pytz
import ttkbootstrap as ttkb
from ttkbootstrap import ttk

# Initial airport time zone mapping
airport_timezones = {
    "CYWG": "America/Winnipeg", "CYBR": "America/Winnipeg", "CYQD": "America/Winnipeg", "CYFO": "America/Winnipeg",
    "CYYL": "America/Winnipeg", "CYBQ": "America/Winnipeg", "CYBV": "America/Winnipeg", "CYNE": "America/Winnipeg",
    "CYIV": "America/Winnipeg", "CYGX": "America/Winnipeg", "CYTH": "America/Winnipeg", "CYYQ": "America/Winnipeg",
    "CYEK": "America/Rankin_Inlet", "CYXN": "America/Rankin_Inlet", "CYBK": "America/Rankin_Inlet", "CYRT": "America/Rankin_Inlet",
    "CYCS": "America/Rankin_Inlet", "CYZS": "America/Rankin_Inlet", "CYUT": "America/Rankin_Inlet",
    "CYBB": "America/Inuvik", "CYYH": "America/Inuvik", "CYGT": "America/Iqaluit", "CYUX": "America/Iqaluit",
    "CYHK": "America/Yellowknife", "CYCB": "America/Yellowknife", "CYIO": "America/Iqaluit", "CYAB": "America/Iqaluit",
    "CYCY": "America/Cambridge_Bay", "CYRB": "America/Cambridge_Bay", "CYTE": "America/Yellowknife", "CYFB": "America/Iqaluit",
    "CYQR": "America/Regina", "CYXE": "America/Regina", "CYPA": "America/Regina", "CYSF": "America/Regina",
    "CYVC": "America/Regina", "CYQK": "America/Winnipeg", "CYHD": "America/Winnipeg", "CYXL": "America/Winnipeg",
    "CYRL": "America/Winnipeg", "CYPL": "America/Winnipeg", "CYQT": "America/Thunder_Bay", "CYMO": "America/Winnipeg",
    "CYTS": "America/Toronto", "CYSK": "America/Iqaluit", "CYGW": "America/Iqaluit", "CYGL": "America/Iqaluit",
    "CYVP": "America/Iqaluit"
}

class TimeDisplayApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Airport Time Zones")
        self.root.geometry("720x400")
        self.root.configure(bg='black')
        self.root.attributes('-topmost', True)

        self.num_zones = tk.IntVar(value=3)
        self.font_family = tk.StringVar(value="Consolas")
        self.font_size = tk.DoubleVar(value=14)
        self.font_color = tk.StringVar(value="#ffffff")
        self.bg_color = tk.StringVar(value="#000000")
        self.transparency = tk.DoubleVar(value=1.0)
        self.stay_on_top = tk.BooleanVar(value=True)

        self.dropdowns = []
        self.zone_frames = []

        self.build_menu()
        self.build_layout()
        self.update_zone_ui()
        self.update_time()

    def build_menu(self):
        menu = tk.Menu(self.root)
        layout_menu = tk.Menu(menu, tearoff=0)
        layout_menu.add_command(label="Set Font Style", command=self.set_font)
        layout_menu.add_command(label="Set Font Color", command=self.choose_font_color)
        layout_menu.add_command(label="Set Background Color", command=self.choose_bg_color)
        layout_menu.add_command(label="Set Transparency", command=self.set_transparency)
        layout_menu.add_separator()
        layout_menu.add_command(label="Add Custom Airport", command=self.add_custom_airport)
        menu.add_cascade(label="Layout Settings", menu=layout_menu)
        self.root.config(menu=menu)

    def build_layout(self):
        control_frame = ttk.Frame(self.root)
        control_frame.pack(pady=5, fill='x')

        ttk.Label(control_frame, text="Additional Airports:").pack(side=tk.LEFT)
        ttk.Spinbox(control_frame, from_=0, to=5, textvariable=self.num_zones, width=3, command=self.update_zone_ui).pack(side=tk.LEFT, padx=5)

        ttk.Label(control_frame, text="(UTC is always displayed first)", font=("Arial", 9, "italic")).pack(side=tk.LEFT, padx=10)

        ttk.Checkbutton(control_frame, text="Stay on Top", variable=self.stay_on_top, command=self.toggle_stay_on_top).pack(side=tk.RIGHT, padx=10)

        self.zones_frame = ttk.Frame(self.root)
        self.zones_frame.pack(pady=10)

    def update_zone_ui(self):
        for frame in self.zone_frames:
            frame.destroy()
        self.zone_frames.clear()
        self.dropdowns.clear()

        self.add_zone_row("UTC", "UTC", is_utc=True)

        for i in range(self.num_zones.get()):
            code = list(airport_timezones.keys())[i % len(airport_timezones)]
            self.add_zone_row(code, airport_timezones[code])

        self.update_display()

    def add_zone_row(self, icao_code, tz_name, is_utc=False):
        frame = ttk.Frame(self.zones_frame)
        frame.grid_columnconfigure(0, weight=1)
        frame.grid_columnconfigure(1, weight=1)
        frame.grid_columnconfigure(2, weight=1)
        frame.pack(fill='x', pady=2)

        if is_utc:
            var = tk.StringVar(value="UTC")
            label = ttk.Label(frame, textvariable=var, width=10, anchor='w', font=(self.font_family.get(), int(self.font_size.get()), "bold"))
            label.grid(row=0, column=0, padx=5, sticky="w")
            self.dropdowns.append((var, frame))
        else:
            var = tk.StringVar(value=icao_code)
            dropdown = ttk.Combobox(frame, textvariable=var, values=list(airport_timezones.keys()), width=10, state="readonly")
            dropdown.grid(row=0, column=0, padx=5, sticky="w")
            self.dropdowns.append((var, frame))

        time_label = ttk.Label(frame, text="", width=10, anchor='center', font=(self.font_family.get(), int(self.font_size.get())), background=self.bg_color.get(), foreground=self.font_color.get())
        time_label.grid(row=0, column=1, padx=10)

        dst_label = ttk.Label(frame, text="", width=5, font=(self.font_family.get(), 10, "italic"), background=self.bg_color.get(), foreground=self.font_color.get())
        dst_label.grid(row=0, column=2, padx=5)

        frame.time_label = time_label
        frame.dst_label = dst_label
        frame.is_utc = is_utc
        self.zone_frames.append(frame)

    def update_display(self):
        bg = self.bg_color.get()
        fg = self.font_color.get()
        font = (self.font_family.get(), int(self.font_size.get()))

        for i, frame in enumerate(self.zone_frames):
            try:
                code, _ = self.dropdowns[i]
                if frame.is_utc:
                    now_utc = datetime.utcnow().strftime('%H:%M')
                    frame.time_label.config(text=f"{now_utc} Z", font=font, foreground=fg, background=bg)
                    frame.dst_label.config(text="STD", foreground=fg, background=bg)
                else:
                    tz_name = airport_timezones.get(code.get())
                    tz = pytz.timezone(tz_name)
                    now = datetime.utcnow()
                    local_time = tz.normalize(pytz.utc.localize(now).astimezone(tz))
                    dst = local_time.dst()
                    dst_flag = "DST" if dst and dst.total_seconds() > 0 else "STD"
                    frame.time_label.config(text=f"{local_time.strftime('%H:%M')} LT", font=font, foreground=fg, background=bg)
                    frame.dst_label.config(text=dst_flag, font=(self.font_family.get(), 10, "italic"), foreground=fg, background=bg)
            except Exception as e:
                frame.time_label.config(text="Invalid", foreground="red", background=bg)
                frame.dst_label.config(text="", background=bg)

        self.root.configure(bg=bg)
        self.zones_frame.configure(style="TFrame")

    def update_time(self):
        self.update_display()
        self.root.after(1000, self.update_time)

    def choose_font_color(self):
        color = colorchooser.askcolor(title="Choose Font Color")[1]
        if color:
            self.font_color.set(color)

    def choose_bg_color(self):
        color = colorchooser.askcolor(title="Choose Background Color")[1]
        if color:
            self.bg_color.set(color)

    def set_transparency(self):
        val = simpledialog.askfloat("Set Transparency", "Enter transparency (0.1 to 1.0):", minvalue=0.1, maxvalue=1.0)
        if val:
            self.transparency.set(val)
            self.root.attributes('-alpha', self.transparency.get())

    def set_font(self):
        val = simpledialog.askstring("Set Font", "Enter font family (e.g., Consolas, Arial, Courier):")
        if val:
            self.font_family.set(val)

    def add_custom_airport(self):
        icao = simpledialog.askstring("New ICAO", "Enter new ICAO code:")
        if not icao:
            return
        tz = simpledialog.askstring("Time Zone", f"Enter IANA timezone for {icao} (e.g., America/Winnipeg):")
        if not tz:
            return
        try:
            pytz.timezone(tz)
            airport_timezones[icao.upper()] = tz
            self.update_zone_ui()
        except:
            tk.messagebox.showerror("Invalid", "Timezone name is not valid.")

    def toggle_stay_on_top(self):
        self.root.attributes('-topmost', self.stay_on_top.get())

if __name__ == "__main__":
    root = ttkb.Window(themename="darkly")
    app = TimeDisplayApp(root)
    root.mainloop()
